/**
 *  Renders a stroke around some text
 *  @author Holmes Bryant <https://github.com/HolmesBryant>
 *  @license GPL-3.0
 */
export class TextStroke extends HTMLElement{shadow=ShadowRoot;neg="-2px";pos="2px";measure="px";#t="silver";#s="2";static observedAttributes=["strokewidth","strokecolor"];constructor(){super(),this.shadow=this.attachShadow({mode:"open"}),this.shadow.innerHTML=`\n\t\t<style>\n\t\t\t::slotted(*) {\n\t\t        text-shadow:\n\t\t        ${this.neg} ${this.neg} 0 ${this.strokecolor},\n\t\t        0 ${this.neg} 0 ${this.strokecolor},\n\t\t        ${this.pos} ${this.neg} 0 ${this.strokecolor},\n\t\t        ${this.pos} 0 0 ${this.strokecolor},\n\t\t        ${this.pos} ${this.pos} 0 ${this.strokecolor},\n\t\t        0 ${this.pos} 0 ${this.strokecolor},\n\t\t        ${this.neg} ${this.pos} 0 ${this.strokecolor},\n\t\t        ${this.neg} 0 0 ${this.strokecolor};\n\t\t\t}\n\t\t</style>\n\t\t<slot></slot>\n\t\t`}connectedCallback(){this.children.length<1&&this.wrapTextInsideElement("h1"),this.#s=this.getAttribute("strokewidth")||this.strokewidth,this.#t=this.getAttribute("strokecolor")||this.strokecolor,this.update(this.#s)}attributeChangedCallback(t,s,e){this[t]=e}update(t){this.shadow.querySelector("style");if("string"==typeof t&&isNaN(t)){const s=t.match(/([\d.]+)(\D*)/);this.measure=s.pop(),t=s.pop()}this.pos=t+this.measure,this.neg=-1*t+this.measure,this.setCss()}setCss(){const t=`\n\t\t\t<style>\n\t\t\t::slotted(*) {\n\t\t        text-shadow:\n\t\t        ${this.neg} ${this.neg} 0 ${this.strokecolor},\n\t\t        0 ${this.neg} 0 ${this.strokecolor},\n\t\t        ${this.pos} ${this.neg} 0 ${this.strokecolor},\n\t\t        ${this.pos} 0 0 ${this.strokecolor},\n\t\t        ${this.pos} ${this.pos} 0 ${this.strokecolor},\n\t\t        0 ${this.pos} 0 ${this.strokecolor},\n\t\t        ${this.neg} ${this.pos} 0 ${this.strokecolor},\n\t\t        ${this.neg} 0 0 ${this.strokecolor};\n\t\t\t}\n\t\t\t</style>\n\t\t`,s=document.createRange().createContextualFragment(t),e=this.shadow.querySelector("style");this.shadow.replaceChild(s,e)}wrapTextInsideElement(t){const s=document.createElement(t);s.innerText=this.innerHTML.trim(),this.innerHTML="",this.append(s)}get strokecolor(){return this.#t}set strokecolor(t){t||(t="inherit"),this.#t=t,this.update(this.strokewidth)}get strokewidth(){return this.#s}set strokewidth(t){t||(t="2px"),this.#s=t,this.update(t)}}document.addEventListener("DOMContentLoaded",customElements.define("text-stroke",TextStroke));
